// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Subscribers.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SubscribersService.
    /// </summary>
    public static partial class SubscribersServiceExtensions
    {
            /// <summary>
            /// Get a subscribers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='source'>
            /// </param>
            public static object GetSubscribers(this ISubscribersService operations, string source = default(string))
            {
                return operations.GetSubscribersAsync(source).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a subscribers.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscribersAsync(this ISubscribersService operations, string source = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscribersWithHttpMessagesAsync(source, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a subscriber by email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='source'>
            /// </param>
            public static object GetByEmail(this ISubscribersService operations, string email = default(string), string source = default(string))
            {
                return operations.GetByEmailAsync(email, source).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a subscriber by email.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByEmailAsync(this ISubscribersService operations, string email = default(string), string source = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByEmailWithHttpMessagesAsync(email, source, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriber'>
            /// </param>
            public static int? CreateAsync(this ISubscribersService operations, Subscriber subscriber = default(Subscriber))
            {
                return operations.CreateAsyncAsync(subscriber).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> CreateAsyncAsync(this ISubscribersService operations, Subscriber subscriber = default(Subscriber), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAsyncWithHttpMessagesAsync(subscriber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='source'>
            /// </param>
            public static int? DeleteAsync(this ISubscribersService operations, string email = default(string), string source = default(string))
            {
                return operations.DeleteAsyncAsync(email, source).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a subscriber.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> DeleteAsyncAsync(this ISubscribersService operations, string email = default(string), string source = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAsyncWithHttpMessagesAsync(email, source, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
